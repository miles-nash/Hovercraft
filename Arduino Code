//Hovercraft Code V1
#include <Servo.h>

const int LiPoSW = 8;
const int HoverPower = 50; //between 0 and 100 % in intervals of 10?
const int SteeringPower = 80; 
bool first = true; // whether or not this is the loops first time through, controls turning on hovering

int hoverPowerExact = HoverPower *10 + 1000; //convert the percentage value given in settings to a usable value
int steeringPowerExact = SteeringPower *10 + 1000; //convert the percentage value given in settings to a usable value

#define MAX_SIGNAL 2000   // <-- Adjust the man PWM here
#define MIN_SIGNAL 1000   // <-- Adjust the mix PWM here

Servo lThrust;  
Servo rThrust;  
Servo rSteering;
Servo lSteering;

// =====================

void setup(){
 
  pinMode(LiPoSW, INPUT); // Defines pin 8 from 3S LiPo as an input
  pinMode(LED_BUILTIN, OUTPUT); // Use the LED_BUILTIN for status signals
  
  Serial.begin(9600);      // begin Serial communication at 9600 baud

  // Serial.println("ELECTRONOOBS  calibration...");
  // Serial.println(" ");
  
  // delay(1500);
  
 Serial.println("Program begin...");
 delay(1000);
  
 Serial.println("This program will start the .");

  lThrust.attach(5); // Attach the servo object to pin 5 (Yellow)
  rThrust.attach(6); // Attach the servo object to pin 6 (Purple)
  lSteering.attach(9);
  rSteering.attach(10);

  Serial.print("Now writing maximum output: (");
  Serial.print(MAX_SIGNAL);
  
  Serial.print(" uSec in this case).");
  Serial.println("\n");
  
  Serial.println("Turn on power source, then wait 2 seconds.");
  Serial.print("\n");
  
 lThrust.writeMicroseconds(MAX_SIGNAL);
 rThrust.writeMicroseconds(MAX_SIGNAL);
 lSteering.writeMicroseconds(MAX_SIGNAL);
 rSteering.writeMicroseconds(MAX_SIGNAL);
 
// Wait for LiPoSW to go HIGH
// *** while loop ***

     while( digitalRead(LiPoSW) == LOW ) //while the button is pressed
  {
    //blink
    digitalWrite(LED_BUILTIN,HIGH);
    delay(1000);
    digitalWrite(LED_BUILTIN,LOW);
    delay(1000);
  }

 
  // while (!Serial.available());    // Edit out Serial input
  // Serial.read();                  // Edit out Serial input

  // Once LiPOSW is HIGH, then do the following...

  delay(1000); // <------ Edit this time to match beeps of BLDC motor
  
  // Send min output
  Serial.print("Sending minimum output: (");
  Serial.print(MIN_SIGNAL);
  Serial.print(" uSec in this case).");
  
  Serial.println("\n");
  
  lThrust.writeMicroseconds(MIN_SIGNAL);
  rThrust.writeMicroseconds(MIN_SIGNAL);
  lSteering.writeMicroseconds(MIN_SIGNAL);
  rSteering.writeMicroseconds(MIN_SIGNAL);

// Blink LED_BUILTIN rapidly (3) times...
int j=1; // Local variable
digitalWrite(LED_BUILTIN,LOW);
delay(100);

  while (j<=3)
  {
     digitalWrite(LED_BUILTIN,HIGH);
     delay(100);
     digitalWrite(LED_BUILTIN,LOW);
     delay(100);
     digitalWrite(LED_BUILTIN, LOW);
     j=j+1;
   }
  
  Serial.println("The  is calibrated.");
  Serial.print("\n");
  
  Serial.println("----");
  Serial.print("\n");
  
  Serial.println("Now, type a values between 1000 and 2000 and press [enter]");
  Serial.println("and the motor will start rotating.");
  Serial.println("Send 1000 to stop the motor and 2000 for full throttle");

  

}

void loop() {

  lThrust.writeMicroseconds(hoverPowerExact);
    rThrust.writeMicroseconds(hoverPowerExact);
 /*
  if (first){
    delay(100);
    Serial.println("firsted");
    Serial.println(hoverPowerExact);
    lThrust.writeMicroseconds(hoverPowerExact);
    rThrust.writeMicroseconds(hoverPowerExact);
    first = false;
  }
 
  if (Serial.available() > 0)
  {
    int DELAY = Serial.parseInt();
    if (DELAY > 999)
    {
      
      lSteering.writeMicroseconds(DELAY);
      rSteering.writeMicroseconds(DELAY);
      float SPEED = (DELAY-1000)/10;
      Serial.print("\n");
      Serial.println("Motor speed:"); Serial.print("  "); Serial.print(SPEED); Serial.print("%"); 
    }     
  }
  */
}



/*

void turnRight(int power){
  if (power == 1){
    lSteering.writeMicroseconds(1400
  }
}
*/
