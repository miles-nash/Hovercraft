/*Code Author: Miles Nash May, 2019
 * Github: https://github.com/miles-nash/Hovercraft
 * Line Following Hovercraft project
 * in conjunction with the Lockheed Martin Explorer Post
 * Teamates Cooper Kern, Dylan ... , and Oliver Testerman
 * 
*/
#include <QTRSensors.h>

#include <Servo.h>


QTRSensors qtr;
const uint8_t SensorCount = 7;
uint16_t sensorValues[SensorCount];

Servo liftL;
Servo liftR;
Servo steeringL;
Servo steeringR;

static int SPEED = 40; // speed of travel out of 180

void setup() {
  // setup each motor, (pin, min pwm, max pwm)
  liftL.attach(5,1000,2000);
  liftR.attach(6, 1000, 2000);
  steeringL.attach(10, 1000,2000);
  steeringR.attach(9, 1000, 2000);
  
  calibrateESC();
  
  delay(1000);
  startHover();
  delay(1000);
  setupQTR();
}

void loop() {

  //adjust these to calibrate the hovercraft
  startHover();
  int tolerance = 500;
  int timeOn = 500;
  int timeOff = 500;
  int power = 80;
  int forwardPower = 140;

  
  uint16_t position = qtr.readLineBlack(sensorValues);

  if(position > 3000 + tolerance){
    steeringL.write(power);
    delay(timeOn);
    steeringL.write(0);
    digitalWrite(13,HIGH);
    delay(timeOff);
    digitalWrite(13,LOW);
  }else if(position < 3000 - tolerance){
    steeringR.write(power);
    delay(timeOn);
    steeringR.write(0);
    digitalWrite(13,HIGH);
    delay(timeOff);
    digitalWrite(13,LOW);
  }
  else{
    steeringL.write(forwardPower);
    delay(timeOn);
    steeringL.write(0);
    delay(100);
    steeringR.write(forwardPower);
    delay(timeOn);
    steeringR.write(0);
  }


}

void startHover() {
  //power up the downward facing motors to hover the craft
  liftL.write(110); //100 is least feasable hover speed
  liftR.write(110);
}


void calibrateESC(){
  // callibrate the escs
  //escs can have differing min and max pwm values, we set these here
  liftL.write(180);//set max esc value
  liftR.write(180);
  steeringL.write(180);
  steeringR.write(180);
  delay(5000);
  liftL.write(0);//set min esc value
  liftR.write(0);
  steeringL.write(0);
  steeringR.write(0);
  delay(5000);
}



//calibrates and sets up the line following sensor. Glide the sensor array across the line a few times while the LED is on
void setupQTR(){
  qtr.setTypeRC();
  qtr.setSensorPins((const uint8_t[]){2,3,4,14,15,12,17}, SensorCount);
  qtr.setEmitterPin(11);

  delay(500);
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, HIGH); // turn on Arduino's LED to indicate we are in calibration mode

  // 2.5 ms RC read timeout (default) * 10 reads per calibrate() call
  // = ~25 ms per calibrate() call.
  // Call calibrate() 200 times to make calibration take about 10 seconds.
  for (uint16_t i = 0; i < 100; i++)
  {
    qtr.calibrate();
  }
  digitalWrite(LED_BUILTIN, LOW); // turn off Arduino's LED to indicate we are through with calibration

  // print the calibration minimum values measured when emitters were on
  Serial.begin(9600);
  for (uint8_t i = 0; i < SensorCount; i++)
  {
    Serial.print(qtr.calibrationOn.minimum[i]);
    Serial.print(' ');
  }
  Serial.println();

  // print the calibration maximum values measured when emitters were on
  for (uint8_t i = 0; i < SensorCount; i++)
  {
    Serial.print(qtr.calibrationOn.maximum[i]);
    Serial.print(' ');
  }
  Serial.println();
  Serial.println();
  delay(1000);
}
